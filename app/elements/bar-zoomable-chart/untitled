<link rel="import" href="../../bower_components/polymer/polymer.html">

<dom-module id='bar-zoomable-chart'>
    <style>
        :host {
            display: block;
            height: 400px;
        }
        .axis {
          font: 10px sans-serif;
        }
        .axis path,
        .axis line {
          fill: none;
          stroke: #000;
          shape-rendering: crispEdges;
        }
        .brush .extent {
          stroke: #fff;
          fill-opacity: .125;
          shape-rendering: crispEdges;
        }
    </style>
    <template>
        <svg id='zoomableBarChart'></svg>
    </template>
</dom-module>
<script>
    
    // by habit, cleaning/parsing the data and return a new object to ensure/clarify data object structure
    function parse(d) {
        var value = { date: parseDate(d.date) }; // turn the date string into a date object

        // adding calculated data to each count in preparation for stacking
        var y0 = 0; // keeps track of where the "previous" value "ended"
        value.counts = ["count", "count2", "count3"].map(function(name) {
            return { name: name,
                     y0: y0,
                     // add this count on to the previous "end" to create a range, and update the "previous end" for the next iteration
                     y1: y0 += +d[name]
                   };
        });
        // quick way to get the total from the previous calculations
        value.total = value.counts[value.counts.length - 1].y1;
        return value;
    }

        // zooming/panning behaviour for overview chart
    function brushed() {
        // update the main chart's x axis data range
        x.domain(brush.empty() ? this.xOverview.domain() : brush.extent());
        // redraw the bars on the main chart
        this.main.selectAll(".bar.stack")
                .attr("transform", function(d) { return "translate(" + x(d.date) + ",0)"; })
        // redraw the x axis of the main chart
        this.main.select(".x.axis").call(this.xAxis);
    }

    Polymer({
        is: 'bar-zoomable-chart',

        properties: {
          url: {
              type: String,
              value: function() {
                return null;
              },
              notify: true
          },
        },

        createElements: function(){
            // sizing information, including margins so there is space for labels, etc
            this.margin =  { top: 20, right: 20, bottom: 100, left: 20 };
            this.width = 960 - this.margin.left - this.margin.right;
            this.height = 500 - this.margin.top - this.margin.bottom;
            this.marginOverview = { top: 430, right: this.margin.right, bottom: 20,  left: this.margin.left };
            this.heightOverview = 500 - this.marginOverview.top - this.marginOverview.bottom;

            // set up a date parsing function for future use
            this.parseDate = d3.time.format("%d/%m/%Y").parse;

            // some colours to use for the bars
            this.colour = d3.scale.ordinal()
                                .range(["#98abc5", "#8a89a6", "#7b6888", "#6b486b", "#a05d56", "#d0743c", "#ff8c00"]);

            // mathematical scales for the x and y axes
            this.x = d3.time.scale()
                            .range([0, this.width]);
            this.y = d3.scale.linear()
                            .range([this.height, 0]);
            this.xOverview = d3.time.scale()
                            .range([0, this.width]);
            this.yOverview = d3.scale.linear()
                            .range([this.heightOverview, 0]);

            // rendering for the x and y axes
            this.xAxis = d3.svg.axis()
                            .scale(this.x)
                            .orient("bottom");
            this.yAxis = d3.svg.axis()
                            .scale(this.y)
                            .orient("left");
            this.xAxisOverview = d3.svg.axis()
                            .scale(this.xOverview)
                            .orient("bottom");

            this.svg = d3.select(this.$.svg)
                    .append("svg") // the overall space
                        .attr("width", this.width + this.margin.left + this.margin.right)
                        .attr("height", this.height + this.margin.top + this.margin.bottom);
            this.main = this.svg.append("g")
                    .attr("class", "main")
                    .attr("transform", "translate(" + this.margin.left + "," + this.margin.top + ")");
            
            this.overview = this.svg.append("g")
                        .attr("class", "overview")
                        .attr("transform", "translate(" + this.marginOverview.left + "," + this.marginOverview.top + ")");

            // brush tool to let us zoom and pan using the overview chart
            this.brush = d3.svg.brush()
                        .x(this.xOverview)
                        .on("brush", brushed);

        },
        getData : function(){

            d3.csv(this.url, parse, function(data) {

                // data ranges for the x and y axes
                x.domain(d3.extent(data, function(d) { return d.date; }));
                y.domain([0, d3.max(data, function(d) { return d.total; })]);
                this.xOverview.domain(x.domain());
                this.yOverview.domain(y.domain());

                // data range for the bar colours
                // (essentially maps attribute names to colour values)
                this.colour.domain(d3.keys(data[0]));

                // draw the axes now that they are fully set up
                this.main.append("g")
                    .attr("class", "x axis")
                    .attr("transform", "translate(0," + this.height + ")")
                    .call(this.xAxis);
                this.main.append("g")
                    .attr("class", "y axis")
                    .call(this.yAxis);
                this.overview.append("g")
                    .attr("class", "x axis")
                    .attr("transform", "translate(0," + this.heightOverview + ")")
                    .call(this.xAxisOverview);

                // draw the bars
                this.main.append("g")
                        .attr("class", "bars")
                    // a group for each stack of bars, positioned in the correct x position
                    .selectAll(".bar.stack")
                    .data(data)
                    .enter().append("g")
                        .attr("class", "bar stack")
                        .attr("transform", function(d) { return "translate(" + x(d.date) + ",0)"; })
                    // a bar for each value in the stack, positioned in the correct y positions
                    .selectAll("rect")
                    .data(function(d) { return d.counts; })
                    .enter().append("rect")
                        .attr("class", "bar")
                        .attr("width", 6)
                        .attr("y", function(d) { return y(d.y1); })
                        .attr("height", function(d) { return y(d.y0) - y(d.y1); })
                        .style("fill", function(d) { return colour(d.name); });

                this.overview.append("g")
                            .attr("class", "bars")
                    .selectAll(".bar")
                    .data(data)
                    .enter().append("rect")
                        .attr("class", "bar")
                        .attr("x", function(d) { return this.xOverview(d.date) - 3; })
                        .attr("width", 6)
                        .attr("y", function(d) { return this.yOverview(d.total); })
                        .attr("height", function(d) { return this.heightOverview - this.yOverview(d.total); });

                // add the brush target area on the overview chart
                this.overview.append("g")
                            .attr("class", "x brush")
                            .call(brush)
                            .selectAll("rect")
                                // -6 is magic number to offset positions for styling/interaction to feel right
                                .attr("y", -6)
                                // need to manually set the height because the brush has
                                // no y scale, i.e. we should see the extent being marked
                                // over the full height of the overview chart
                                .attr("height", this.heightOverview + 7);  // +7 is magic number for styling

            });


        }


    });
</script>



